"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
var MultipleValueTextInput_module_css_1 = __importDefault(require("./MultipleValueTextInput.module.css"));
var MultipleValueTextInputItem_1 = __importDefault(require("./MultipleValueTextInputItem"));
var propTypes = {
    /** Any values the input's collection should be prepopulated with. */
    values: prop_types_1.default.arrayOf(prop_types_1.default.string),
    /** Method which should be called when an item is added to the collection */
    onItemAdded: prop_types_1.default.func.isRequired,
    /** Method which should be called when an item is removed from the collection */
    onItemDeleted: prop_types_1.default.func.isRequired,
    /** Label to be attached to the input, if desired */
    label: prop_types_1.default.string,
    /** Name attribute for the input */
    name: prop_types_1.default.string.isRequired,
    /** Placeholder attribute for the input, if desired */
    placeholder: prop_types_1.default.string,
    /** ASCII charcode for the keys which should
     * trigger an item to be added to the collection (defaults to comma (44) and Enter (13))
     */
    submitKeys: prop_types_1.default.arrayOf(prop_types_1.default.string),
    /** JSX or string which will be used as the control to delete an item from the collection */
    deleteButton: prop_types_1.default.node,
    /** Whether or not the blur event should trigger the added-item handler */
    shouldAddOnBlur: prop_types_1.default.bool,
    /** Custom class name for the input element */
    className: prop_types_1.default.string,
    /** Custom class name for the input label element */
    labelClassName: prop_types_1.default.string
};
/**
 * A text input component for React which maintains and displays a collection
 * of entered values as an array of strings.
 */
function MultipleValueTextInput(_a) {
    var _b = _a.placeholder, placeholder = _b === void 0 ? '' : _b, _c = _a.label, label = _c === void 0 ? '' : _c, name = _a.name, _d = _a.deleteButton, deleteButton = _d === void 0 ? react_1.default.createElement("span", null, "\u00D7") : _d, _e = _a.onItemAdded, onItemAdded = _e === void 0 ? function () { return null; } : _e, _f = _a.onItemDeleted, onItemDeleted = _f === void 0 ? function () { return null; } : _f, _g = _a.className, className = _g === void 0 ? '' : _g, _h = _a.labelClassName, labelClassName = _h === void 0 ? '' : _h, _j = _a.submitKeys, submitKeys = _j === void 0 ? ['Enter', ','] : _j, _k = _a.values, initialValues = _k === void 0 ? [] : _k, shouldAddOnBlur = _a.shouldAddOnBlur, forwardedProps = __rest(_a, ["placeholder", "label", "name", "deleteButton", "onItemAdded", "onItemDeleted", "className", "labelClassName", "submitKeys", "values", "shouldAddOnBlur"]);
    var _l = (0, react_1.useState)(initialValues), values = _l[0], setValues = _l[1];
    var _m = (0, react_1.useState)(''), value = _m[0], setValue = _m[1];
    var nonCharacterKeyLabels = ['Enter', 'Tab'];
    var delimiters = submitKeys.filter(function (element) { return !nonCharacterKeyLabels.includes(element); });
    var handleValueChange = function (e) {
        setValue(e.currentTarget.value);
    };
    var handleItemAdd = function (addedValue) {
        if (values.includes(addedValue) || !addedValue) {
            setValue('');
            return;
        }
        var newValues = values.concat(addedValue);
        setValues(newValues);
        setValue('');
        onItemAdded(value, newValues);
    };
    var handleItemsAdd = function (addedValues) {
        var uniqueValues = Array.from(new Set(addedValues.filter(function (elm) { return elm && !values.includes(elm); })));
        if (uniqueValues.length > 0) {
            var newValues_1 = Array.from(new Set(__spreadArray(__spreadArray([], values, true), uniqueValues, true)));
            setValues(newValues_1);
            setValue('');
            uniqueValues.forEach(function (addedValue) {
                onItemAdded(addedValue, newValues_1);
            });
        }
        else {
            setValue('');
        }
    };
    var handleItemRemove = function (removedValue) {
        var currentValues = values;
        var newValues = currentValues.filter(function (v) { return v !== removedValue; });
        onItemDeleted(removedValue, newValues);
        setValues(newValues);
    };
    var handleKeypress = function (e) {
        // Defaults: Enter, Comma (e.key === 'Enter' or ',')
        if (submitKeys.includes(e.key)) {
            e.preventDefault();
            handleItemAdd(e.currentTarget.value);
        }
    };
    var handleBlur = function (e) {
        if (shouldAddOnBlur) {
            e.preventDefault();
            handleItemAdd(e.target.value);
        }
    };
    var splitMulti = function (str) {
        var tempChar = delimiters[0]; // We can use the first token as a temporary join character
        var result = str;
        for (var i = 1; i < delimiters.length; i += 1) {
            result = result.split(delimiters[i]).join(tempChar); // Handle scenarios where pasted text has more than one submitKeys in it
        }
        return result.split(tempChar);
    };
    var handlePaste = function (e) {
        var pastedText = e.clipboardData.getData('text/plain');
        var areSubmitKeysPresent = delimiters.some(function (d) { return pastedText.includes(d); });
        if (areSubmitKeysPresent) {
            var splitTerms = splitMulti(pastedText);
            if (splitTerms.length > 0) {
                e.preventDefault();
                handleItemsAdd(splitTerms);
            }
        }
    };
    var valueDisplays = values.map(function (v) { return (react_1.default.createElement(MultipleValueTextInputItem_1.default, { value: v, key: v, deleteButton: deleteButton, handleItemRemove: handleItemRemove })); });
    return (react_1.default.createElement("div", { className: "multiple-value-text-input", role: "form" },
        react_1.default.createElement("label", { htmlFor: name, className: "".concat(labelClassName, " ").concat(MultipleValueTextInput_module_css_1.default.inputLabel), "data-testid": "label" },
            label,
            react_1.default.createElement("div", { className: "multiple-value-text-input-item-container" }, values.length > 0 && react_1.default.createElement("p", { role: "list" }, valueDisplays)),
            react_1.default.createElement("input", __assign({ "aria-label": label, name: name, placeholder: placeholder, value: value, type: "text", onKeyPress: handleKeypress, onChange: handleValueChange, onPaste: handlePaste, onBlur: handleBlur, className: "".concat(className, " ").concat(MultipleValueTextInput_module_css_1.default.inputElement) }, forwardedProps)))));
}
MultipleValueTextInput.propTypes = propTypes;
exports.default = MultipleValueTextInput;
